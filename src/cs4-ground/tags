!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
App	app.hpp	/^    App(Window* win) : App_base(win){};$/;"	f	class:App	access:public	signature:(Window * win)
App	app.hpp	/^class App : public App_base {$/;"	c	inherits:App_base
App::App	app.hpp	/^    App(Window* win) : App_base(win){};$/;"	f	class:App	access:public	signature:(Window * win)
App::key_callback	app.cpp	/^void App::key_callback(Key key, int scancode, Key_action action, Key_mods mods)$/;"	f	class:App	typeref:typename:void	signature:(Key key,int scancode,Key_action action,Key_mods mods)
App::key_callback	app.hpp	/^    virtual void key_callback(Key, int, Key_action, Key_mods);$/;"	p	class:App	typeref:typename:void	access:public	signature:(Key,int,Key_action,Key_mods)
App::render_loop	app.cpp	/^void App::render_loop()$/;"	f	class:App	typeref:typename:void	signature:()
App::render_loop	app.hpp	/^    void render_loop();$/;"	p	class:App	typeref:typename:void	access:public	signature:()
App::~App	app.hpp	/^    virtual ~App() = default;$/;"	p	class:App	access:public	signature:()
GLM_ENABLE_EXPERIMENTAL	app.cpp	/^#define GLM_ENABLE_EXPERIMENTAL$/;"	d	file:
Global	global.hpp	/^    Global() = default;$/;"	p	class:Global	access:public	signature:()
Global	global.hpp	/^    Global(Global&&) = delete;$/;"	p	class:Global	access:public	signature:(Global &&)
Global	global.hpp	/^    Global(const Global&) = delete;$/;"	p	class:Global	access:public	signature:(const Global &)
Global	global.hpp	/^class Global {$/;"	c
Global::Global	global.hpp	/^    Global() = default;$/;"	p	class:Global	access:public	signature:()
Global::Global	global.hpp	/^    Global(Global&&) = delete;$/;"	p	class:Global	access:public	signature:(Global &&)
Global::Global	global.hpp	/^    Global(const Global&) = delete;$/;"	p	class:Global	access:public	signature:(const Global &)
Global::Instance	global.hpp	/^    static Global& Instance()$/;"	f	class:Global	typeref:typename:Global &	access:public	signature:()
Global::operator =	global.hpp	/^    Global& operator=(Global&&) = delete;$/;"	p	class:Global	typeref:typename:Global &	access:public	signature:(Global &&)
Global::operator =	global.hpp	/^    Global& operator=(const Global&) = delete;$/;"	p	class:Global	typeref:typename:Global &	access:public	signature:(const Global &)
Global::print	global.cpp	/^void Global::print() {}$/;"	f	class:Global	typeref:typename:void	signature:()
Global::print	global.hpp	/^    void print();$/;"	p	class:Global	typeref:typename:void	access:public	signature:()
Global::zero	global.hpp	/^    int zero = 0;$/;"	m	class:Global	typeref:typename:int	access:public
Global::zerof	global.hpp	/^    float zerof = 0.0f;$/;"	m	class:Global	typeref:typename:float	access:public
Global::~Global	global.hpp	/^    ~Global() = default;$/;"	p	class:Global	access:public	signature:()
Instance	global.hpp	/^    static Global& Instance()$/;"	f	class:Global	typeref:typename:Global &	access:public	signature:()
Options	options.cpp	/^Options::Options()$/;"	f	class:Options	signature:()
Options	options.hpp	/^    Options();$/;"	p	class:Options	access:public	signature:()
Options	options.hpp	/^    Options(Options&&) = delete;$/;"	p	class:Options	access:public	signature:(Options &&)
Options	options.hpp	/^    Options(const Options&) = default;$/;"	p	class:Options	access:public	signature:(const Options &)
Options	options.hpp	/^class Options{$/;"	c
Options::Options	options.cpp	/^Options::Options()$/;"	f	class:Options	signature:()
Options::Options	options.hpp	/^    Options();$/;"	p	class:Options	access:public	signature:()
Options::Options	options.hpp	/^    Options(Options&&) = delete;$/;"	p	class:Options	access:public	signature:(Options &&)
Options::Options	options.hpp	/^    Options(const Options&) = default;$/;"	p	class:Options	access:public	signature:(const Options &)
Options::assetspath	options.hpp	/^    std::string assetspath;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::builddir	options.hpp	/^    std::string builddir;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::configfile	options.hpp	/^    std::string configfile;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::debug	options.hpp	/^    int debug;$/;"	m	class:Options	typeref:typename:int	access:public
Options::fullscreen	options.hpp	/^    bool fullscreen;$/;"	m	class:Options	typeref:typename:bool	access:public
Options::height	options.hpp	/^    int height;$/;"	m	class:Options	typeref:typename:int	access:public
Options::homedir	options.hpp	/^    std::string homedir;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::modelsdir	options.hpp	/^    std::string modelsdir;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::operator =	options.hpp	/^    Options& operator=(Options&&) = delete;$/;"	p	class:Options	typeref:typename:Options &	access:public	signature:(Options &&)
Options::operator =	options.hpp	/^    Options& operator=(const Options&) = delete;$/;"	p	class:Options	typeref:typename:Options &	access:public	signature:(const Options &)
Options::print	options.cpp	/^void Options::print(std::string name)$/;"	f	class:Options	typeref:typename:void	signature:(std::string name)
Options::print	options.hpp	/^    void print(std::string title);$/;"	p	class:Options	typeref:typename:void	access:public	signature:(std::string title)
Options::searchpath	options.hpp	/^    std::string searchpath;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::shadersdir	options.hpp	/^    std::string shadersdir;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::sourcedir	options.hpp	/^    std::string sourcedir;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::texturesdir	options.hpp	/^    std::string texturesdir;$/;"	m	class:Options	typeref:typename:std::string	access:public
Options::verbose	options.hpp	/^    bool verbose;$/;"	m	class:Options	typeref:typename:bool	access:public
Options::width	options.hpp	/^    int width;$/;"	m	class:Options	typeref:typename:int	access:public
Options::~Options	options.hpp	/^    ~Options() = default;$/;"	p	class:Options	access:public	signature:()
SNIPPETS_APP_HPP	app.hpp	/^#define SNIPPETS_APP_HPP$/;"	d
SNIPPETS_CS_CONFIG_HPP	cs_config.hpp	/^#define SNIPPETS_CS_CONFIG_HPP$/;"	d
SNIPPETS_CS_CONFIG_H_IN	cs_config.h.in	/^#define SNIPPETS_CS_CONFIG_H_IN$/;"	d	file:
SNIPPETS_DO_ARGS_HPP	do_args.hpp	/^#define SNIPPETS_DO_ARGS_HPP$/;"	d
SNIPPETS_DO_ENV_HPP	do_env.hpp	/^#define SNIPPETS_DO_ENV_HPP$/;"	d
SNIPPETS_DO_MESON_HPP	do_meson.hpp	/^#define SNIPPETS_DO_MESON_HPP$/;"	d
SNIPPETS_DO_YAML_HPP	do_yaml.hpp	/^#define SNIPPETS_DO_YAML_HPP$/;"	d
SNIPPETS_GLOBAL_HPP	global.hpp	/^#define SNIPPETS_GLOBAL_HPP$/;"	d
SNIPPETS_OPTIONS_HPP	options.hpp	/^#define SNIPPETS_OPTIONS_HPP$/;"	d
Vector	app.cpp	/^using Vector = std::vector<T, std::allocator<T>>;$/;"	t	typeref:typename:std::vector<T,std::allocator<T>>	file:
__anon3bd80ed70111	app.cpp	/^namespace {$/;"	n	file:
__anon3bd80ed70111::angle	app.cpp	/^auto angle = (GLfloat)0.0f;	     \/\/ model rotation angle$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::axis	app.cpp	/^auto axis = vec3(1.0f, 1.0f, 1.0f);  \/\/ model rotational axis$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::cube	app.cpp	/^Model_cube cube;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:Model_cube
__anon3bd80ed70111::cubemap_num	app.cpp	/^GLfloat cubemap_num = 0.0f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
__anon3bd80ed70111::cubeobj_prog	app.cpp	/^GLuint cubeobj_prog = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anon3bd80ed70111::delta	app.cpp	/^constexpr GLfloat delta = 0.1f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
__anon3bd80ed70111::delta_alpha	app.cpp	/^constexpr GLfloat delta_alpha = 0.5f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
__anon3bd80ed70111::delta_theta	app.cpp	/^constexpr GLfloat delta_theta = 0.005f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
__anon3bd80ed70111::ebo	app.cpp	/^GLuint ebo = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anon3bd80ed70111::eye_dist	app.cpp	/^auto eye_dist = start_dist;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::eye_front	app.cpp	/^auto eye_front = vec3(0, 0, -1);  \/\/ Front is -ive Z$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::eye_lookat	app.cpp	/^auto eye_lookat = vec3(0, 0, 0);	\/\/ Look at the origin$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::eye_pos	app.cpp	/^auto eye_pos = vec3(0, 0, start_dist);	\/\/ Camera at (8,0,0), in World Space$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::eye_right	app.cpp	/^auto eye_right = vec3(1, 0, 0);	  \/\/ Right is +ive X$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::eye_up	app.cpp	/^auto eye_up = vec3(0, 1, 0);	  \/\/ Up is +ive Y (will be (0,-1,0) to look upside-down)$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::mvp	app.cpp	/^glm::mat4 mvp = glm::mat4(1.0f);$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:glm::mat4
__anon3bd80ed70111::mvp_id	app.cpp	/^GLuint mvp_id = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anon3bd80ed70111::pos	app.cpp	/^auto pos = vec3(0.0f, -4.0f, 0.0f);  \/\/ model location$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::sf	app.cpp	/^auto sf = vec3(1.0f, 1.0f, 1.0f);    \/\/ model scaling factor$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
__anon3bd80ed70111::skybox_loc	app.cpp	/^GLuint skybox_loc = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anon3bd80ed70111::skybox_prog	app.cpp	/^GLuint skybox_prog = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anon3bd80ed70111::skybox_txtr	app.cpp	/^GLuint skybox_txtr = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anon3bd80ed70111::start_dist	app.cpp	/^constexpr GLfloat start_dist = 20.0f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
__anon3bd80ed70111::vao	app.cpp	/^GLuint vao = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anon3bd80ed70111::vbo	app.cpp	/^GLuint vbo = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anon3bd80ed70111::vp	app.cpp	/^glm::mat4 vp = glm::mat4(1.0f);$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:glm::mat4
__anon3bd80ed70111::vp_id	app.cpp	/^GLuint vp_id = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
__anonccc63d8c0111	global.hpp	/^namespace {$/;"	n
__anonccc63d8c0111::global	global.hpp	/^Global& global = Global::Instance();$/;"	v	namespace:__anonccc63d8c0111	typeref:typename:Global &
angle	app.cpp	/^auto angle = (GLfloat)0.0f;	     \/\/ model rotation angle$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
assetspath	options.hpp	/^    std::string assetspath;$/;"	m	class:Options	typeref:typename:std::string	access:public
axis	app.cpp	/^auto axis = vec3(1.0f, 1.0f, 1.0f);  \/\/ model rotational axis$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
builddir	options.hpp	/^    std::string builddir;$/;"	m	class:Options	typeref:typename:std::string	access:public
calculate_camera	app.cpp	/^static void calculate_camera() { eye_pos = -eye_dist * eye_front; }$/;"	f	typeref:typename:void	file:	signature:()
calculate_camera	app.cpp	/^static void calculate_camera();$/;"	p	typeref:typename:void	file:	signature:()
configfile	options.hpp	/^    std::string configfile;$/;"	m	class:Options	typeref:typename:std::string	access:public
cs_build_dir	cs_config.h.in	/^constexpr char cs_build_dir[] = "@CS_BUILD_DIR@";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_build_dir	cs_config.hpp	/^constexpr char cs_build_dir[] = ".";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_config	cs_config.h.in	/^namespace cs_config {$/;"	n	file:
cs_config	cs_config.hpp	/^namespace cs_config {$/;"	n
cs_config::cs_build_dir	cs_config.h.in	/^constexpr char cs_build_dir[] = "@CS_BUILD_DIR@";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_config::cs_build_dir	cs_config.hpp	/^constexpr char cs_build_dir[] = ".";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_config::cs_config_file	cs_config.h.in	/^constexpr char cs_config_file[] = "@CS_CONFIG_FILE@";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_config::cs_config_file	cs_config.hpp	/^constexpr char cs_config_file[] = "cs3.yml";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_config::cs_source_dir	cs_config.h.in	/^constexpr char cs_source_dir[] = "@CS_SOURCE_DIR@";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_config::cs_source_dir	cs_config.hpp	/^constexpr char cs_source_dir[] = ".";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_config_file	cs_config.h.in	/^constexpr char cs_config_file[] = "@CS_CONFIG_FILE@";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_config_file	cs_config.hpp	/^constexpr char cs_config_file[] = "cs3.yml";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_source_dir	cs_config.h.in	/^constexpr char cs_source_dir[] = "@CS_SOURCE_DIR@";$/;"	v	namespace:cs_config	typeref:typename:char[]
cs_source_dir	cs_config.hpp	/^constexpr char cs_source_dir[] = ".";$/;"	v	namespace:cs_config	typeref:typename:char[]
cube	app.cpp	/^Model_cube cube;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:Model_cube
cubemap_num	app.cpp	/^GLfloat cubemap_num = 0.0f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
cubeobj_prog	app.cpp	/^GLuint cubeobj_prog = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
debug	options.hpp	/^    int debug;$/;"	m	class:Options	typeref:typename:int	access:public
delta	app.cpp	/^constexpr GLfloat delta = 0.1f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
delta_alpha	app.cpp	/^constexpr GLfloat delta_alpha = 0.5f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
delta_theta	app.cpp	/^constexpr GLfloat delta_theta = 0.005f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
do_draw_commands	app.cpp	/^static void do_draw_commands(const Window &);$/;"	p	typeref:typename:void	file:	signature:(const Window &)
do_draw_commands	app.cpp	/^static void do_draw_commands(const Window &win)$/;"	f	typeref:typename:void	file:	signature:(const Window & win)
ebo	app.cpp	/^GLuint ebo = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
eye_dist	app.cpp	/^auto eye_dist = start_dist;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
eye_front	app.cpp	/^auto eye_front = vec3(0, 0, -1);  \/\/ Front is -ive Z$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
eye_lookat	app.cpp	/^auto eye_lookat = vec3(0, 0, 0);	\/\/ Look at the origin$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
eye_pos	app.cpp	/^auto eye_pos = vec3(0, 0, start_dist);	\/\/ Camera at (8,0,0), in World Space$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
eye_right	app.cpp	/^auto eye_right = vec3(1, 0, 0);	  \/\/ Right is +ive X$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
eye_up	app.cpp	/^auto eye_up = vec3(0, 1, 0);	  \/\/ Up is +ive Y (will be (0,-1,0) to look upside-down)$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
fullscreen	options.hpp	/^    bool fullscreen;$/;"	m	class:Options	typeref:typename:bool	access:public
getnumarg	do_args.cpp	/^static int getnumarg(char *);$/;"	p	typeref:typename:int	file:	signature:(char *)
getnumarg	do_args.cpp	/^static int getnumarg(char *s)$/;"	f	typeref:typename:int	file:	signature:(char * s)
global	global.hpp	/^Global& global = Global::Instance();$/;"	v	namespace:__anonccc63d8c0111	typeref:typename:Global &
height	options.hpp	/^    int height;$/;"	m	class:Options	typeref:typename:int	access:public
homedir	options.hpp	/^    std::string homedir;$/;"	m	class:Options	typeref:typename:std::string	access:public
init_camera	app.cpp	/^static void init_camera()$/;"	f	typeref:typename:void	file:	signature:()
init_camera	app.cpp	/^static void init_camera();$/;"	p	typeref:typename:void	file:	signature:()
key_callback	app.cpp	/^static void key_callback(Window *win, int key, int scancode, int action, int mods);$/;"	p	typeref:typename:void	file:	signature:(Window * win,int key,int scancode,int action,int mods)
key_callback	app.cpp	/^void App::key_callback(Key key, int scancode, Key_action action, Key_mods mods)$/;"	f	class:App	typeref:typename:void	signature:(Key key,int scancode,Key_action action,Key_mods mods)
key_callback	app.hpp	/^    virtual void key_callback(Key, int, Key_action, Key_mods);$/;"	p	class:App	typeref:typename:void	access:public	signature:(Key,int,Key_action,Key_mods)
load_texture_data	app.cpp	/^static void load_texture_data()$/;"	f	typeref:typename:void	file:	signature:()
load_texture_data	app.cpp	/^static void load_texture_data();$/;"	p	typeref:typename:void	file:	signature:()
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
modelsdir	options.hpp	/^    std::string modelsdir;$/;"	m	class:Options	typeref:typename:std::string	access:public
move_back	app.cpp	/^static void move_back(float delta) { eye_dist += delta; }$/;"	f	typeref:typename:void	file:	signature:(float delta)
move_back	app.cpp	/^static void move_back(float delta);$/;"	p	typeref:typename:void	file:	signature:(float delta)
mvp	app.cpp	/^glm::mat4 mvp = glm::mat4(1.0f);$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:glm::mat4
mvp_id	app.cpp	/^GLuint mvp_id = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
operator =	global.hpp	/^    Global& operator=(Global&&) = delete;$/;"	p	class:Global	typeref:typename:Global &	access:public	signature:(Global &&)
operator =	global.hpp	/^    Global& operator=(const Global&) = delete;$/;"	p	class:Global	typeref:typename:Global &	access:public	signature:(const Global &)
operator =	options.hpp	/^    Options& operator=(Options&&) = delete;$/;"	p	class:Options	typeref:typename:Options &	access:public	signature:(Options &&)
operator =	options.hpp	/^    Options& operator=(const Options&) = delete;$/;"	p	class:Options	typeref:typename:Options &	access:public	signature:(const Options &)
pos	app.cpp	/^auto pos = vec3(0.0f, -4.0f, 0.0f);  \/\/ model location$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
prepare	app.cpp	/^static void prepare(const Window &);$/;"	p	typeref:typename:void	file:	signature:(const Window &)
prepare	app.cpp	/^static void prepare(const Window &win)$/;"	f	typeref:typename:void	file:	signature:(const Window & win)
prepare	app.cpp	/^static void prepare(const Window &win);$/;"	p	typeref:typename:void	file:	signature:(const Window & win)
prepare_attributes	app.cpp	/^static void prepare_attributes()$/;"	f	typeref:typename:void	file:	signature:()
prepare_attributes	app.cpp	/^static void prepare_attributes();$/;"	p	typeref:typename:void	file:	signature:()
prepare_buffers	app.cpp	/^static void prepare_buffers()$/;"	f	typeref:typename:void	file:	signature:()
prepare_buffers	app.cpp	/^static void prepare_buffers();$/;"	p	typeref:typename:void	file:	signature:()
prepare_matrices	app.cpp	/^static void prepare_matrices(const Window &);$/;"	p	typeref:typename:void	file:	signature:(const Window &)
prepare_matrices	app.cpp	/^static void prepare_matrices(const Window &win)$/;"	f	typeref:typename:void	file:	signature:(const Window & win)
prepare_models	app.cpp	/^static void prepare_models()$/;"	f	typeref:typename:void	file:	signature:()
prepare_models	app.cpp	/^static void prepare_models();$/;"	p	typeref:typename:void	file:	signature:()
prepare_programs	app.cpp	/^static void prepare_programs()$/;"	f	typeref:typename:void	file:	signature:()
prepare_programs	app.cpp	/^static void prepare_programs();$/;"	p	typeref:typename:void	file:	signature:()
prepare_textures	app.cpp	/^static void prepare_textures()$/;"	f	typeref:typename:void	file:	signature:()
prepare_textures	app.cpp	/^static void prepare_textures();$/;"	p	typeref:typename:void	file:	signature:()
prepare_uniforms	app.cpp	/^static void prepare_uniforms()$/;"	f	typeref:typename:void	file:	signature:()
prepare_uniforms	app.cpp	/^static void prepare_uniforms();$/;"	p	typeref:typename:void	file:	signature:()
print	global.cpp	/^void Global::print() {}$/;"	f	class:Global	typeref:typename:void	signature:()
print	global.hpp	/^    void print();$/;"	p	class:Global	typeref:typename:void	access:public	signature:()
print	options.cpp	/^void Options::print(std::string name)$/;"	f	class:Options	typeref:typename:void	signature:(std::string name)
print	options.hpp	/^    void print(std::string title);$/;"	p	class:Options	typeref:typename:void	access:public	signature:(std::string title)
print_usage	do_args.cpp	/^static void print_usage(char *);$/;"	p	typeref:typename:void	file:	signature:(char *)
print_usage	do_args.cpp	/^static void print_usage(char *program_name)$/;"	f	typeref:typename:void	file:	signature:(char * program_name)
process_args	do_args.cpp	/^void process_args(int argc, char **argv, Options_store &os)$/;"	f	typeref:typename:void	signature:(int argc,char ** argv,Options_store & os)
process_args	do_args.hpp	/^void process_args(int, char**, Options_store& os);$/;"	p	typeref:typename:void	signature:(int,char **,Options_store & os)
process_buildconf	do_meson.cpp	/^void process_buildconf(Options_store& os)$/;"	f	typeref:typename:void	signature:(Options_store & os)
process_buildconf	do_meson.hpp	/^void process_buildconf(Options_store& os);$/;"	p	typeref:typename:void	signature:(Options_store & os)
process_env	do_env.cpp	/^void process_env(Options_store& os)$/;"	f	typeref:typename:void	signature:(Options_store & os)
process_env	do_env.hpp	/^void process_env(Options_store&);$/;"	p	typeref:typename:void	signature:(Options_store &)
process_yaml	do_yaml.cpp	/^void process_yaml(std::string conffile, Options_store& os)$/;"	f	typeref:typename:void	signature:(std::string conffile,Options_store & os)
process_yaml	do_yaml.hpp	/^void process_yaml(std::string, Options_store&);$/;"	p	typeref:typename:void	signature:(std::string,Options_store &)
render_loop	app.cpp	/^void App::render_loop()$/;"	f	class:App	typeref:typename:void	signature:()
render_loop	app.hpp	/^    void render_loop();$/;"	p	class:App	typeref:typename:void	access:public	signature:()
rotate_right	app.cpp	/^static void rotate_right(float theta)$/;"	f	typeref:typename:void	file:	signature:(float theta)
rotate_right	app.cpp	/^static void rotate_right(float theta);$/;"	p	typeref:typename:void	file:	signature:(float theta)
rotate_up	app.cpp	/^static void rotate_up(float theta)$/;"	f	typeref:typename:void	file:	signature:(float theta)
rotate_up	app.cpp	/^static void rotate_up(float theta);$/;"	p	typeref:typename:void	file:	signature:(float theta)
searchpath	options.hpp	/^    std::string searchpath;$/;"	m	class:Options	typeref:typename:std::string	access:public
sf	app.cpp	/^auto sf = vec3(1.0f, 1.0f, 1.0f);    \/\/ model scaling factor$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:auto
shadersdir	options.hpp	/^    std::string shadersdir;$/;"	m	class:Options	typeref:typename:std::string	access:public
skybox_loc	app.cpp	/^GLuint skybox_loc = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
skybox_prog	app.cpp	/^GLuint skybox_prog = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
skybox_txtr	app.cpp	/^GLuint skybox_txtr = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
sourcedir	options.hpp	/^    std::string sourcedir;$/;"	m	class:Options	typeref:typename:std::string	access:public
start_dist	app.cpp	/^constexpr GLfloat start_dist = 20.0f;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLfloat
store_texture_data	app.cpp	/^static void store_texture_data(Vector<Image> &image)$/;"	f	typeref:typename:void	file:	signature:(Vector<Image> & image)
store_texture_data	app.cpp	/^static void store_texture_data(Vector<Image> &image);$/;"	p	typeref:typename:void	file:	signature:(Vector<Image> & image)
texturesdir	options.hpp	/^    std::string texturesdir;$/;"	m	class:Options	typeref:typename:std::string	access:public
vao	app.cpp	/^GLuint vao = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
vbo	app.cpp	/^GLuint vbo = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
verbose	options.hpp	/^    bool verbose;$/;"	m	class:Options	typeref:typename:bool	access:public
vp	app.cpp	/^glm::mat4 vp = glm::mat4(1.0f);$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:glm::mat4
vp_id	app.cpp	/^GLuint vp_id = 0;$/;"	v	namespace:__anon3bd80ed70111	typeref:typename:GLuint
width	options.hpp	/^    int width;$/;"	m	class:Options	typeref:typename:int	access:public
zero	global.hpp	/^    int zero = 0;$/;"	m	class:Global	typeref:typename:int	access:public
zerof	global.hpp	/^    float zerof = 0.0f;$/;"	m	class:Global	typeref:typename:float	access:public
~App	app.hpp	/^    virtual ~App() = default;$/;"	p	class:App	access:public	signature:()
~Global	global.hpp	/^    ~Global() = default;$/;"	p	class:Global	access:public	signature:()
~Options	options.hpp	/^    ~Options() = default;$/;"	p	class:Options	access:public	signature:()
